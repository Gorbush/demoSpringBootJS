Написать REST API оболочку вокруг GraalJs, которая будет давать возможность через апи

1) запускать в graaljs произвольный код javascript, переданный в теле запроса, и возвращать обратно в теле ответа вывод скрипта
на консоль либо сообщение об ошибке;
2) просматривать статус скрипта (завершен успешно, с ошибкой, выполняется, в очереди) и его консольный вывод на момент запроса;
3) останавливать зависшие скрипты принудительно;
4) просматривать список скриптов завершенных и выполняющихся скриптов;
5) удалять завершенные скрипты из списка

Запросы могут приходить параллельно, причем скрипт может выполняться сколько угодно долго, а может и вообще зависнуть, например,
 в бесконечном цикле - содержание скриптов мы контролировать не можем.

Я вижу два варианта дизайна апи, блокирующий и неблокирующий. Если есть желание, можно попробовать оба.

В блокирующем варианте клиент посылает запрос, блокируется и ждет ответа на запрос выполнения скрипта, содержащий вывод скрипта на консоль.

Если клиент отсоединяется от сервера и прерывает соединение, выполнение скрипта должно быть продолжено, как при неблокирующем варианте.

В блокирующем варианте вывод скрипта на консоль нужно возвращать по мере выполнения скрипта, а не по окончании выполнения.

Неблокирующий вариант дизайна апи выглядит примерно так: http://restcookbook.com/Resources/asynchroneous-operations/

Он требует более сложной реализации клиента, так как он требует опроса статуса, но упрощает реализацию сервера. В идеале хорошо бы их комбинировать,
чтобы у клиента был выбор реализации - блокирующий или нет, он может выбрать один из вариантов, передавая параметр запроса.

В общем, это задача на знание принципов REST, правильную работу с потоками и синхронизацию ресурсов. Перед выполнением рекомендую заглянуть
в соответствующий трейл oracle java tutorial.

Для тестирования писать клиента не обязательно. Можно использовать Postman или curl, юнит тесты приветствуются. Сборка через maven либо gradle.

Рекомендую писать на Spring boot. Будут вопросы - спрашивайте.

Кстати, по дизайну рест апи можно глянуть на такой ресурс https://restfulapi.net/ там в том числе есть информация по идемпотентности, hateoas
и другим механизмам